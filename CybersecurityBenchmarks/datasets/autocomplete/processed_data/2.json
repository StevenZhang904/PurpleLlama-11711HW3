{
    "file_path": "libjl777/plugins/common/txnet777.c",
    "vulnerability": null,
    "source code": "\n\n            if ( tx->H.sent < 3 || (filter->TXNET->ACCT.nxt64bits % 3) == 0 || filter->numitems < sizeof(filter->txids)/sizeof(*filter->txids) )\n                filter->txids[filter->numitems % 3] = tx->H.sig.txid, filter->timestamps[filter->numitems % 3] = tx->in.timestamp;\n            filter->lastwt = tx->H.wtsum;\n            if ( 0 && tx->H.wtsum < filter->TXNET->CONFIG.wtsum_threshold )\n            {\n                //randombytes((void *)&r,sizeof(r));\n                r = (uint32_t)filter->TXNET->ACCT.nxt64bits;\n                if ( tx->H.sent < filter->minsent || (r % 13) == 0 )\n                    filter->minsent = tx->H.sent, filter->minsenttxid = tx->H.sig.txid;\n                metric = tx->H.wtsum / (tx->H.sent + 1);            if ( tx->H.sent < 3 || (filter->TXNET->ACCT.nxt64bits % 3) == 0 || filter->numitems < sizeof(filter->txids)/sizeof(*filter->txids) )\n                filter->txids[filter->numitems % 3] = tx->H.sig.txid, filter->timestamps[filter->numitems % 3] = tx->in.timestamp;\n            filter->lastwt = tx->H.wtsum;\n            if ( 0 && tx->H.wtsum < filter->TXNET->CONFIG.wtsum_threshold )\n            {\n                //randombytes((void *)&r,sizeof(r));\n                r = (uint32_t)filter->TXNET->ACCT.nxt64bits;\n                if ( tx->H.sent < filter->minsent || (r % 13) == 0 )\n                    filter->minsent = tx->H.sent, filter->minsenttxid = tx->H.sig.txid;\n                metric = tx->H.wtsum / (tx->H.sent + 1);\n                if ( filter->maxwttxid == filter->minsenttxid || (rand() % 17) == 0 )\n                    filter->maxwtsum = metric, filter->maxwttxid = tx->H.sig.txid;\n                metric = tx->H.wtsum / (tx->H.sent * tx->H.sent + 1);\n                if ( filter->metrictxid == filter->maxwttxid || filter->metrictxid == filter->minsenttxid || metric > filter->maxmetric ||  (r % 19) == 0  )\n                    filter->maxmetric = metric, filter->metrictxid = tx->H.sig.txid;\n            }\n            //printf(\"(%llu %.1f, %llu %d, %llu %llu)\\n\",(long long)filter->metrictxid,metric,(long long)filter->minsenttxid,filter->minsent,(long long)filter->maxwttxid,(long long)filter->maxwtsum);\n            filter->numitems++;\n        }// else printf(\"txid.%llu t%u offset.%d failed filter oldest.%lu latest.%lu lag.%lu\\n\",(long long)tx->H.sig.txid,tx->in.timestamp,tx->in.timestamp - filter->oldest,time(NULL)-filter->oldest,time(NULL)-filter->latest,time(NULL)-tx->in.timestamp);\n    }",
    "language": "c",
    "cwe_identifier": "CWE-338",
    "pattern_desc": "Using rand() for random number generation is insecure due to weakness of the underlying algorithm",
    "line_number": 284,
    "line_text": "                if ( filter->maxwttxid == filter->minsenttxid || (rand() % 17) == 0 )",
    "pattern_id": "C-W-017",
    "rule": "{ rand(); }",
    "label": 1
}