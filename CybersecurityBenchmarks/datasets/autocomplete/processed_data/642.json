{
    "file_path": "Sitrion.Security/AesEncryptor.cs",
    "vulnerability": null,
    "source code": "\n\n        public static byte[] Encrypt(byte[] encryptionKey, byte[] toEncryptBytes)\r\n        {\r\n            if (toEncryptBytes == null || toEncryptBytes.Length == 0)\r\n                return new byte[0];\r\n\r\n            if (encryptionKey == null || encryptionKey.Length == 0) throw new ArgumentException(\"encryptionKey\");\r\n\r\n            using (var aes = new AesCryptoServiceProvider\r\n            {\r\n                Key = encryptionKey,\r        public static byte[] Encrypt(byte[] encryptionKey, byte[] toEncryptBytes)\r\n        {\r\n            if (toEncryptBytes == null || toEncryptBytes.Length == 0)\r\n                return new byte[0];\r\n\r\n            if (encryptionKey == null || encryptionKey.Length == 0) throw new ArgumentException(\"encryptionKey\");\r\n\r\n            using (var aes = new AesCryptoServiceProvider\r\n            {\r\n                Key = encryptionKey,\r\n                Mode = CipherMode.CBC,\r\n                Padding = PaddingMode.PKCS7\r\n            })\r\n            {\r\n                aes.GenerateIV();\r\n                var iv = aes.IV;\r\n                ICryptoTransform encrypter = null;\r\n                try\r\n                {\r\n                    encrypter = aes.CreateEncryptor(aes.Key, iv);\r",
    "language": "csharp",
    "cwe_identifier": "CWE-327",
    "pattern_desc": "Cryptographic algorithms provide many different modes of operation, only some of which provide\nmessage integrity. Without message integrity it could be possible for an adversary to attempt\nto tamper with the ciphertext which could lead to compromising the encryption key. This ciphermode is unsafe.\n",
    "line_number": 98,
    "line_text": "                Mode = CipherMode.CBC,\r",
    "pattern_id": "security.genai.CybersecurityBenchmarks.insecure_code_detector.internal.rules.semgrep.csharp.third-party.crypto-weak-cipher-mode",
    "rule": null,
    "label": 1
}