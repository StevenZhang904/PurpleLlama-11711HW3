{
    "file_path": "src/Cassandra.IntegrationTests/Core/CustomPayloadTests.cs",
    "vulnerability": null,
    "source code": "\n\n            if (TestClusterManager.CheckCassandraVersion(false, Version.Parse(\"2.2.0\"), Comparison.LessThan))\n            {\n                Assert.Ignore(\"Requires Cassandra version >= 2.2\");\n                return;\n            }\n\n            //Using a mirroring handler, the server will reply providing the same payload that was sent\n            var jvmArgs = new [] { \"-Dcassandra.custom_query_handler_class=org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler\" };\n            var testCluster = TestClusterManager.GetTestCluster(1, 0, false, DefaultMaxClusterCreateRetries, true, true, 0, jvmArgs);\n            Session = testCluster.Session;            if (TestClusterManager.CheckCassandraVersion(false, Version.Parse(\"2.2.0\"), Comparison.LessThan))\n            {\n                Assert.Ignore(\"Requires Cassandra version >= 2.2\");\n                return;\n            }\n\n            //Using a mirroring handler, the server will reply providing the same payload that was sent\n            var jvmArgs = new [] { \"-Dcassandra.custom_query_handler_class=org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler\" };\n            var testCluster = TestClusterManager.GetTestCluster(1, 0, false, DefaultMaxClusterCreateRetries, true, true, 0, jvmArgs);\n            Session = testCluster.Session;\n            Session.Execute(string.Format(TestUtils.CreateKeyspaceSimpleFormat, Keyspace, 1));\n            Session.Execute(string.Format(TestUtils.CreateTableSimpleFormat, Table));\n        }\n\n        [Test, TestCassandraVersion(2, 2)]\n        public void Query_Payload_Test()\n        {\n            var outgoing = new Dictionary<string, byte[]> { { \"k1\", Encoding.UTF8.GetBytes(\"value1\") }, { \"k2\", Encoding.UTF8.GetBytes(\"value2\") } };\n            var stmt = new SimpleStatement(\"SELECT * FROM system.local\");\n            stmt.SetOutgoingPayload(outgoing);",
    "language": "csharp",
    "cwe_identifier": "CWE-89",
    "pattern_desc": "Dynamic SQL queries constructed from sanitized input can lead to SQL Injection.\n",
    "line_number": 49,
    "line_text": "            Session.Execute(string.Format(TestUtils.CreateKeyspaceSimpleFormat, Keyspace, 1));",
    "pattern_id": "security.genai.CybersecurityBenchmarks.insecure_code_detector.internal.rules.semgrep.csharp.third-party.sql-injection",
    "rule": null,
    "label": 1
}