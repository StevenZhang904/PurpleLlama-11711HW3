{
    "file_path": "src/cargo/lib.rs",
    "vulnerability": null,
    "source code": "\n\n    exec(flags, shell)\n}\n\nfn process<V, F>(mut callback: F)\n    where F: FnMut(&[String], &Config) -> CliResult<Option<V>>,\n          V: Encodable\n{\n    let mut shell = shell(true);\n    process_executed((|| {\n        let config = try!(Config::new(&mut shell));    exec(flags, shell)\n}\n\nfn process<V, F>(mut callback: F)\n    where F: FnMut(&[String], &Config) -> CliResult<Option<V>>,\n          V: Encodable\n{\n    let mut shell = shell(true);\n    process_executed((|| {\n        let config = try!(Config::new(&mut shell));\n        let args: Vec<_> = try!(env::args_os().map(|s| {\n            s.into_string().map_err(|s| {\n                human(format!(\"invalid unicode in argument: {:?}\", s))\n            })\n        }).collect());\n        callback(&args, &config)\n    })(), &mut shell)\n}\n\npub fn process_executed<T>(result: CliResult<Option<T>>, shell: &mut MultiShell)",
    "language": "rust",
    "cwe_identifier": "CWE-807",
    "pattern_desc": "The first argument can be controlled by an attacker. Do not use this function in security relevant contexts",
    "line_number": 98,
    "line_text": "        let args: Vec<_> = try!(env::args_os().map(|s| {",
    "pattern_id": "RUST-R-004",
    "rule": "args_os\\(\\)",
    "label": 1
}